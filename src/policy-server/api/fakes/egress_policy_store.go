// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/api"
	"policy-server/store"
	"sync"
)

type EgressPolicyStore struct {
	GetByDestinationGUIDStub        func(guid ...string) ([]store.EgressPolicy, error)
	getByDestinationGUIDMutex       sync.RWMutex
	getByDestinationGUIDArgsForCall []struct {
		guid []string
	}
	getByDestinationGUIDReturns struct {
		result1 []store.EgressPolicy
		result2 error
	}
	getByDestinationGUIDReturnsOnCall map[int]struct {
		result1 []store.EgressPolicy
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressPolicyStore) GetByDestinationGUID(guid ...string) ([]store.EgressPolicy, error) {
	fake.getByDestinationGUIDMutex.Lock()
	ret, specificReturn := fake.getByDestinationGUIDReturnsOnCall[len(fake.getByDestinationGUIDArgsForCall)]
	fake.getByDestinationGUIDArgsForCall = append(fake.getByDestinationGUIDArgsForCall, struct {
		guid []string
	}{guid})
	fake.recordInvocation("GetByDestinationGUID", []interface{}{guid})
	fake.getByDestinationGUIDMutex.Unlock()
	if fake.GetByDestinationGUIDStub != nil {
		return fake.GetByDestinationGUIDStub(guid...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByDestinationGUIDReturns.result1, fake.getByDestinationGUIDReturns.result2
}

func (fake *EgressPolicyStore) GetByDestinationGUIDCallCount() int {
	fake.getByDestinationGUIDMutex.RLock()
	defer fake.getByDestinationGUIDMutex.RUnlock()
	return len(fake.getByDestinationGUIDArgsForCall)
}

func (fake *EgressPolicyStore) GetByDestinationGUIDArgsForCall(i int) []string {
	fake.getByDestinationGUIDMutex.RLock()
	defer fake.getByDestinationGUIDMutex.RUnlock()
	return fake.getByDestinationGUIDArgsForCall[i].guid
}

func (fake *EgressPolicyStore) GetByDestinationGUIDReturns(result1 []store.EgressPolicy, result2 error) {
	fake.GetByDestinationGUIDStub = nil
	fake.getByDestinationGUIDReturns = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyStore) GetByDestinationGUIDReturnsOnCall(i int, result1 []store.EgressPolicy, result2 error) {
	fake.GetByDestinationGUIDStub = nil
	if fake.getByDestinationGUIDReturnsOnCall == nil {
		fake.getByDestinationGUIDReturnsOnCall = make(map[int]struct {
			result1 []store.EgressPolicy
			result2 error
		})
	}
	fake.getByDestinationGUIDReturnsOnCall[i] = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByDestinationGUIDMutex.RLock()
	defer fake.getByDestinationGUIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EgressPolicyStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.EgressPolicyStore = new(EgressPolicyStore)
