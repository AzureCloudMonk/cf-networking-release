// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/api"
	"sync"
)

type PayloadValidator struct {
	ValidatePayloadStub        func(payload *api.PoliciesPayload) error
	validatePayloadMutex       sync.RWMutex
	validatePayloadArgsForCall []struct {
		payload *api.PoliciesPayload
	}
	validatePayloadReturns struct {
		result1 error
	}
	validatePayloadReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PayloadValidator) ValidatePayload(payload *api.PoliciesPayload) error {
	fake.validatePayloadMutex.Lock()
	ret, specificReturn := fake.validatePayloadReturnsOnCall[len(fake.validatePayloadArgsForCall)]
	fake.validatePayloadArgsForCall = append(fake.validatePayloadArgsForCall, struct {
		payload *api.PoliciesPayload
	}{payload})
	fake.recordInvocation("ValidatePayload", []interface{}{payload})
	fake.validatePayloadMutex.Unlock()
	if fake.ValidatePayloadStub != nil {
		return fake.ValidatePayloadStub(payload)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validatePayloadReturns.result1
}

func (fake *PayloadValidator) ValidatePayloadCallCount() int {
	fake.validatePayloadMutex.RLock()
	defer fake.validatePayloadMutex.RUnlock()
	return len(fake.validatePayloadArgsForCall)
}

func (fake *PayloadValidator) ValidatePayloadArgsForCall(i int) *api.PoliciesPayload {
	fake.validatePayloadMutex.RLock()
	defer fake.validatePayloadMutex.RUnlock()
	return fake.validatePayloadArgsForCall[i].payload
}

func (fake *PayloadValidator) ValidatePayloadReturns(result1 error) {
	fake.ValidatePayloadStub = nil
	fake.validatePayloadReturns = struct {
		result1 error
	}{result1}
}

func (fake *PayloadValidator) ValidatePayloadReturnsOnCall(i int, result1 error) {
	fake.ValidatePayloadStub = nil
	if fake.validatePayloadReturnsOnCall == nil {
		fake.validatePayloadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validatePayloadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PayloadValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validatePayloadMutex.RLock()
	defer fake.validatePayloadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PayloadValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
